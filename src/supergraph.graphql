schema
  @core(feature: "https://specs.apollo.dev/core/v0.1"),
  @core(feature: "https://specs.apollo.dev/join/v0.1")
{
  query: Query
  mutation: Mutation
}

directive @core(feature: String!) repeatable on SCHEMA

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

type Beer {
  id: Int!
  name: String!
  brand: String
  price: Float
}

"""Mensagem de entrada"""
input ConsumerMessageInput {
  msg: String
}

"""Message de resultado"""
type ConsumerMessageResult {
  id: String
  message: String
}

scalar join__FieldSet

enum join__Graph {
  API_SERVICE_AUTH @join__graph(name: "API_SERVICE_AUTH" url: "http://ec2-3-140-244-169.us-east-2.compute.amazonaws.com/")
  API_SERVICE_LICENSE @join__graph(name: "API_SERVICE_LICENSE" url: "http://ec2-18-116-30-81.us-east-2.compute.amazonaws.com/")
  API_SERVICE_LOCAL @join__graph(name: "API_SERVICE_LOCAL" url: "http://localhost:4001/")
  API_SERVICE_RABBITMQ_CONSUME @join__graph(name: "API_SERVICE_RABBITMQ_CONSUME" url: "http://ec2-18-219-122-41.us-east-2.compute.amazonaws.com/")
}

type Message {
  id: ID!
  content: String
  author: String
}

input MessageInput {
  content: String
  author: String
}

"""Service de mensagens"""
type MessageService {
  """Obter uma mensagem"""
  getMessage: Message

  """Cria uma nova mensagem"""
  createMessage: Message

  """Atualiza uma mensagem"""
  updateMessage: Message

  """Informação da classe"""
  toString: String
}

type Mutation {
  register(input: UserInput): String @join__field(graph: API_SERVICE_AUTH)
  login(input: UserInput): String @join__field(graph: API_SERVICE_AUTH)

  """
  ### Criar uma nova mensagem
  #### Exemplo
  ```javascript
        mutation {
        messageServiceCreate(input: {author: "Roger", content: "lorem"}) {
          createMessage {
            id
            content
            author
          }
        }
      }
  ```
  """
  messageServiceCreate(input: MessageInput): MessageService @join__field(graph: API_SERVICE_LICENSE)
  messageServiceUpdate(id: ID!, input: MessageInput): MessageService @join__field(graph: API_SERVICE_LICENSE)
  sendMessage(input: ConsumerMessageInput): String @join__field(graph: API_SERVICE_RABBITMQ_CONSUME)
}

type Query {
  versionAuth: String @join__field(graph: API_SERVICE_AUTH)
  beer(id: Int!): Beer @join__field(graph: API_SERVICE_AUTH)
  beers(brand: String!): [Beer] @join__field(graph: API_SERVICE_AUTH)
  allUsers: [User] @join__field(graph: API_SERVICE_AUTH)
  fieldName(login: String): User @join__field(graph: API_SERVICE_AUTH)
  messageService(id: ID!): MessageService @join__field(graph: API_SERVICE_LICENSE)
  getDie(numSides: Int): RandomDie @join__field(graph: API_SERVICE_LICENSE)

  """#### Version service"""
  versionLicense: String @join__field(graph: API_SERVICE_LICENSE)
  showMessage: String @join__field(graph: API_SERVICE_LICENSE)
  showMessage2: String @join__field(graph: API_SERVICE_LICENSE)
  showNome(nome: String!): String @join__field(graph: API_SERVICE_LICENSE)

  """#### Informação de exemplo"""
  test: String @join__field(graph: API_SERVICE_LICENSE)

  """### Obter o ip do request"""
  ip: String @join__field(graph: API_SERVICE_LICENSE)
  apiGetwayVersion: String @join__field(graph: API_SERVICE_LOCAL)

  """#### Versão do serviço de rabbitmq consumer"""
  versionRabbitMQConsumer: String @join__field(graph: API_SERVICE_RABBITMQ_CONSUME)

  """#### Resultado"""
  getMessage: ConsumerMessageResult @join__field(graph: API_SERVICE_RABBITMQ_CONSUME)
  getAllMessages: [ConsumerMessageResult] @join__field(graph: API_SERVICE_RABBITMQ_CONSUME)
}

type RandomDie {
  numSides: Int!
  rollOnce: Int!
  toString: String!
  roll(numRolls: Int!): [Int]
}

type User {
  id: String
  login: String
}

input UserInput {
  login: String
  password: String
}
